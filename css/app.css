/* universal selector */
/* default CSS properties should be added in universal selector */
* {
  /* color: red;
  background-color: yellow; */
  /* margin: 0;
  padding: 0; */
}

/* 
universal (*) < element selector < class selector < id selector < inline style
*/

/* id is represented using hash/ pound/ # */
/* id has highest priority */
/* #country {
    background-color: lightgreen;
} */

/* class is represented using a dot . */
/* .user-detail {
  background-color: blue;
}

.test1 {
  background-color: orange;
}

.border-me1 {
  border: solid 2px green;
  padding: 10px;
  margin-bottom: 10px;
} */

.border-me {
  border: solid 2px red;
  /* gap between the content and the border is called padding */
  /* short-hand form */
  /* padding: 10px;  */

  /* first val is left; then it moves clock wise */
  /* 10px=> top */
  /* 20px => right */
  /* 30px => bottom */
  /* 40px => left */
  /* padding: 10px 20px 30px 40px; */

  /* padding: 10px 20px 10px 20px; */
  /* first value is top and bottom */
  /* second val is left and right */
  padding: 10px 20px;
  /* padding-left: 100px;
  padding-right: 50px; */

  /* padding-left: 10px;
  padding-right: 10px;
  padding-bottom: 10px;
  padding-top: 10px; */

  /* --------------------------------------- */
  /* margin: add a space outside the border till the nearest other content */
  /* all ways for adding the padding values are applicable in margin also */
  /* margin: 30px;   */
  /* margin-top: 8px; */
}

/* all text css props will be here */
.text {
  /* color */
  color: green;

  /* text transformation */
  text-transform: uppercase;
  text-transform: lowercase;
  /* first character of a word is capitalized! */
  text-transform: capitalize;
  text-transform: unset;

  /* text decoration */
  text-decoration-line: line-through;
  text-decoration-line: overline;
  text-decoration-line: overline underline;
  text-decoration-line: underline;
  text-decoration-color: blue;
  text-decoration-style: dashed;
  text-decoration-style: dotted;
  text-decoration-style: double;
  text-decoration-thickness: 2px;
  text-decoration: unset;

  /* text spacing */
  letter-spacing: 1px;
  word-spacing: 20px;
  /* there will be no line breaks/ whites spaces */
  white-space: nowrap;

  /* text alignment */
  text-align: left;
  text-align: right;
  text-align: center;

  /* text shadow */
  /* 1st value determines the shadow to be pushed by x unit along x axis */
  /* 2nd value determines the shadow to be pushed by x unit along y axis */
  /* 3rd value determines the blur radius of the shadow */
  text-shadow: 5px 5px 2px red;
  text-shadow: 5px 5px 2px red, 5px 5px 2px rgb(182, 232, 30);
}

.demo {
  /* background-color: red; */
}

/* element level selector */
/* p {
  background-color: yellow;
}

.span-class {
  background-color: aqua;
}

span {
  background-color: greenyellow;
} */

/* specificity */
/* element < class which comes last < id < inline */

/* position */
.position-demo {
  /* position: static; */
  /* position: relative; */
  position: fixed;
  border: solid 1px red;
  top: 0;
  /* top and bottom should not be used together */
  /* top: 10px; */
  /* bottom: 10px; */
  /* right and left should not be used together */
  /* right: 20px; */
  /* left: 20px; */
}

/* .test1 {
  position: relative;
  top: 20px;
} */

.grand-parent {
  position: relative;
  border: solid 1px blue;
  position: relative;
  width: 800px;
  height: 400px;
}

.parent {
  margin-top: 10px;
  margin-left: 10px;
  position: relative;
  border: solid 1px red;
  width: 400px;
  height: 200px;
}

.child {
  position: absolute;
  border: solid 1px green;
  top: 10px;
  left: 500px;
  height: 100px;
  width: 200px;
  color: white;
}

.heading {
  /* combination of relative and fixed */
  position: sticky;
  top: 0;
}
/* static; relative; fixed; absolute; sticky */

.display-demo {
  /* hides the element */
  display: none;
  /* convert any (either inline/ block) element to inline type */
  display: inline;
}

.block-me {
  /* convert any element to block type */
  display: block;
}

/* width and height CANNOT be applied to any inline elements   */
/* .span-demo {
  border: solid 1px red;
  width: 300px;
  height: 100px;
} */

/* width and height CAN be added to block level elements */
/* .div-demo {
  margin-top: 10px;
  border: solid 1px blue;
  width: 300px;
  height: 100px;
} */

/* inline-block helps us to add with and height to any inline element but keeping its original behavior intact */
/* this is an inline element style */
.span-demo {
  border: solid 1px red;
  width: 300px;
  height: 100px;
  display: inline-block;
}

/* applied on block level element */
.div-demo {
  margin-top: 10px;
  border: solid 1px blue;
  width: 300px;
  height: 100px;
  display: inline-block;
}

/* 
NOTE::: INLINE BLOCK
--- inline elements
1. if applied on inline element, then width and height can be added (it takes only that much of space it is needed to fit in)
2. it will not break the line
--- block elements
1. If applied on block level element then it will take the width and height specified and will not break the line (behave like inline)
*/

.container {
  display: flex;
  /* by default the value is row */
  flex-direction: column;
  /* flex-direction: row; */
  /* flex-direction: row-reverse; */
  /* flex-direction: column; */
  /* flex-direction: column-reverse; */
  justify-content: center;
  /* equal spacing between elements */
  justify-content: space-between;
  justify-content: space-around;
  justify-content: space-evenly;
  justify-content: start;
  justify-content: end;

  /* if flex-direction is column then justify content behaviors will not work */
  /* we need to use align-items */
  /* default: start */
  align-items: center;
  align-items: end;
  align-items: start;
}

.box {
  color: green;
}

/* a {
color: hotpink;
} */

/* pseudo class */
/* hover effect */
/* a:hover {
  color: yellow;
}

.btn {
  display: inline-block;
  background-color: #f44336;
  color: white;
  padding: 15px 24px;
  text-align: center;
  text-decoration: none;
  margin-left: 20px;
  margin-top: 20px;
  font-size: 12px;
}

.heading-demo {
  font-size: 10px;
} */

/* ul {
  list-style-type: none;
  list-style-type: circle;
  list-style-type: square;
  list-style-type: disc;
  list-style-type: decimal;
  list-style-type: lower-roman;
  list-style-type: upper-roman;
}

ol {
  list-style-type: circle;
} */

/* descendant combinator */
/* .grandd-parent p {
  background-color: yellow;
}

.grandd-parent span {
  background-color: aqua;
} */

/* child combinator */
/* .parent > .child */
/* only direct children will be selected */
/* div > p {
  background-color: yellow;
} */

/* Adjacent/ next sibling combinator */
/* div + p {
  background-color: yellow;
} */

/* sibling */
/* div ~ p {
  background-color: yellow;
} */

/* pseudo class */
/* no space should be applied before or after the colon :  */
/* a:link {
  color: tomato;
}

a:visited {
  color: green;
}

a:hover {
  color: yellow;
  cursor: wait;
}

a:active {
  color: blue;
} */

/* p:first-child {
  background-color: yellow;
}

span:first-child {
  background-color: aqua;
}

p:last-child {
  background-color: red;
} */

/* pseudo element */
p::first-line {
  color: red;
}

p::first-letter {
  color: rgb(79, 192, 41);
  font-size: 20px;
}

p::selection {
  color: red;
  background-color: yellow;
}

p::before {
  content: "Hello ";
  color: red;
}

p::after {
  content: " Bye ";
  color: red;
}

/* opacity adds a transparency level to an element */
/* value ranges from 0 to 1 */
/* 0 means invisible */
/* it can be also represented in percent form [0 to 100%] */
/* h1 {
  opacity: 0;
}

h1:hover {
  opacity: 1;
  cursor: pointer;
} */

/* z-index property works like a stack */
/* any element with higher z-index will be on top */
/* only on absolute positioned elements */
h1 {
  color: white;
  position: absolute;
  left: 0;
  top: 0;
  z-index: 1;
}

img {
  width: 300px;
  height: 150px;
}
